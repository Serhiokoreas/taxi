import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from database import execute_query
from scheduler import schedule_trip_reminder
from config import BOT_TOKEN, TRIP_TYPES, MAX_SEATS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ", callback_data='book_seat')],
        [InlineKeyboardButton("–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='my_bookings')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üöñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫—Å–∏! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫"""
    query = update.callback_query
    schedule_text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫:\n\n"

    for trip_type, trip_name in TRIP_TYPES.items():
        schedule_text += f"{trip_name}:\n"
        trips = execute_query(
            "SELECT date, passengers FROM trips WHERE trip_type = %s",
            (trip_type,),
            fetchall=True
        )
        if trips:
            for date, passengers in trips:
                passengers_list = passengers.split(',') if passengers else []
                available_seats = MAX_SEATS - len(passengers_list)
                schedule_text += f"üìÜ –î–∞—Ç–∞: {date}, —Å–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç: {available_seats}\n"
        else:
            schedule_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫\n"
        schedule_text += "\n"

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=schedule_text,
        reply_markup=reply_markup
    )


async def handle_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–í –£—Ñ—É", callback_data='book_to_ufa')],
        [InlineKeyboardButton("–ò–∑ –£—Ñ—ã", callback_data='book_from_ufa')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )


async def book_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –ø–æ–µ–∑–¥–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    trip_type = query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('to_ufa' –∏–ª–∏ 'from_ufa')

    trips = execute_query(
        "SELECT date, passengers FROM trips WHERE trip_type = %s",
        (trip_type,),
        fetchall=True
    )

    if not trips:
        await query.edit_message_text(
            text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='book_seat')]])
        )
        return

    keyboard = [
        [InlineKeyboardButton(f"–î–∞—Ç–∞: {trip[0]}", callback_data=f"confirm_booking_{trip_type}_{trip[0]}")]
        for trip in trips
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='book_seat')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=reply_markup
    )


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    data = query.data.split('_')
    trip_type, trip_date = data[2], data[3]
    user_id = query.from_user.id

    trip = execute_query(
        "SELECT passengers FROM trips WHERE trip_type = %s AND date = %s",
        (trip_type, trip_date),
        fetchone=True
    )
    passengers = trip[0].split(',') if trip and trip[0] else []

    if len(passengers) >= MAX_SEATS:
        await query.edit_message_text(
            text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –ø–æ–µ–∑–¥–∫—É –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='book_seat')]])
        )
        return

    context.user_data['booking'] = {'trip_type': trip_type, 'trip_date': trip_date}
    await query.edit_message_text(text="üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):")


async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    address = update.message.text
    booking = context.user_data.get('booking')
    if not booking:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    trip_type = booking['trip_type']
    trip_date = booking['trip_date']
    user_id = update.message.from_user.id

    execute_query(
        "INSERT INTO bookings (user_id, trip_type, date, address) VALUES (%s, %s, %s, %s)",
        (user_id, trip_type, trip_date, address)
    )
    passengers = execute_query(
        "SELECT passengers FROM trips WHERE trip_type = %s AND date = %s",
        (trip_type, trip_date),
        fetchone=True
    )[0]
    updated_passengers = f"{passengers},{user_id}" if passengers else str(user_id)
    execute_query(
        "UPDATE trips SET passengers = %s WHERE trip_type = %s AND date = %s",
        (updated_passengers, trip_type, trip_date)
    )

    schedule_trip_reminder(context, user_id, f"{TRIP_TYPES[trip_type]} –Ω–∞ {trip_date}", trip_date)
    await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logging.error(msg="Exception while handling update:", exc_info=context.error)
    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_schedule, pattern='^view_schedule$'))
    application.add_handler(CallbackQueryHandler(handle_booking, pattern='^book_seat$'))
    application.add_handler(CallbackQueryHandler(book_trip, pattern='^book_to_ufa$|^book_from_ufa$'))
    application.add_handler(CallbackQueryHandler(confirm_booking, pattern='^confirm_booking_.*'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address))

    application.add_error_handler(error_handler)

    application.run_polling()


if __name__ == "__main__":
    main()
