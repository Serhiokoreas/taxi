import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from database import execute_query, increment_loyalty_points, check_loyalty_reward, ban_user, unban_user
from scheduler import schedule_trip_reminder
from config import BOT_TOKEN, TRIP_TYPES, MAX_SEATS, ADMIN_IDS
from utils import is_admin, broadcast_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if is_admin(user_id):
        keyboard = [
            [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data='admin_schedule')],
            [InlineKeyboardButton("üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')],
            [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data='admin_announcement')],
            [InlineKeyboardButton("üìû –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", callback_data='admin_view_passengers')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–º–µ–Ω—é", callback_data='start')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return

    # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ", callback_data='book_seat')],
        [InlineKeyboardButton("–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='my_bookings')],
        [InlineKeyboardButton("–£—Å–ª–æ–≤–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data='loyalty_info')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üöñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫—Å–∏! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def book_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    query = update.callback_query
    user_id = query.from_user.id
    trip_type = query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('to_ufa' –∏–ª–∏ 'from_ufa')

    trips = execute_query(
        "SELECT id, date, passengers FROM trips WHERE trip_type = %s",
        (trip_type,),
        fetchall=True
    )

    if not trips:
        await query.edit_message_text(
            text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')]])
        )
        return

    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏
    keyboard = [
        [InlineKeyboardButton(f"–î–∞—Ç–∞: {trip[1]} (ID: {trip[0]})",
                              callback_data=f"confirm_booking_{trip_type}_{trip[0]}")]
        for trip in trips
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=reply_markup
    )


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    query = update.callback_query
    data = query.data.split('_')
    trip_type, trip_id = data[2], data[3]
    user_id = query.from_user.id

    # –£–≤–µ–¥–æ–º–∏—Ç—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç
    context.user_data['trip_id'] = trip_id
    keyboard = [
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å 2 –º–µ—Å—Ç–∞", callback_data='multi_booking_2')],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å 3 –º–µ—Å—Ç–∞", callback_data='multi_booking_3')],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å 4 –º–µ—Å—Ç–∞", callback_data='multi_booking_4')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_booking')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=(
            "üöñ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 1 –º–µ—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +79999999999.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
        ),
        reply_markup=reply_markup
    )


async def handle_multi_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç"""
    query = update.callback_query
    admin_id = ADMIN_IDS[0]
    user_id = query.from_user.id
    num_seats = int(query.data.split('_')[-1])
    trip_id = context.user_data.get('trip_id')

    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
    context.bot.send_message(
        chat_id=admin_id,
        text=f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {num_seats} –º–µ—Å—Ç –Ω–∞ –ø–æ–µ–∑–¥–∫—É ID {trip_id}.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {num_seats} –º–µ—Å—Ç–∞",
                                  callback_data=f"admin_confirm_{trip_id}_{num_seats}")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='admin_cancel_multi_booking')]
        ])
    )

    await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def admin_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    query = update.callback_query
    trips = execute_query("SELECT id, trip_type, date FROM trips", fetchall=True)
    if not trips:
        await query.edit_message_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return

    text = "üìã –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    for trip_id, trip_type, date in trips:
        text += f"ID {trip_id}: {TRIP_TYPES[trip_type]}, –¥–∞—Ç–∞ {date}\n"

    keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data='add_trip')],
                [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data='remove_trip')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def admin_view_passengers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    query = update.callback_query
    passengers = execute_query(
        "SELECT bookings.user_id, users.phone FROM bookings "
        "JOIN users ON bookings.user_id = users.user_id", fetchall=True
    )
    if not passengers:
        await query.edit_message_text("–ù–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    text = "üìû –°–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:\n\n"
    for user_id, phone in passengers:
        text += f"ID {user_id}: üì± {phone}\n"

    await query.edit_message_text(text)


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(book_trip, pattern='^book_to_ufa$|^book_from_ufa$'))
    application.add_handler(CallbackQueryHandler(confirm_booking, pattern='^confirm_booking_.*'))
    application.add_handler(CallbackQueryHandler(handle_multi_booking, pattern='^multi_booking_.*'))
    application.add_handler(CallbackQueryHandler(admin_schedule, pattern='^admin_schedule$'))
    application.add_handler(CallbackQueryHandler(admin_view_passengers, pattern='^admin_view_passengers$'))

    application.run_polling()


if __name__ == "__main__":
    main()
